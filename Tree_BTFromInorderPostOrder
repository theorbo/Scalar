/* Given the inorder and postorder traversal of a tree, construct the binary tree.

NOTE: You may assume that duplicates do not exist in the tree. */


/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    Map<Integer, Integer> inorderMap;

  public TreeNode buildTree(int[] A, int[] B) {

    inorderMap = new HashMap<>();
    for (int i = 0; i < A.length; i++) {
      inorderMap.put(A[i], i);
    }
    return getTree(A, B, 0, A.length-1, 0, B.length-1);

  }

  private TreeNode getTree(int[] inorder, int[] postorder, int ps, int pe, int is, int ie) {

    if (ps > pe ) {
      return null;
    }

    TreeNode treeNode = new TreeNode(postorder[pe]);
    int id = inorderMap.get(postorder[pe]);
    treeNode.left = getTree(inorder, postorder, ps, ps + id - is-1, is, id - 1);
    treeNode.right = getTree(inorder, postorder, ps + id - is , pe - 1, id + 1, ie);
    return treeNode;
  }
}
