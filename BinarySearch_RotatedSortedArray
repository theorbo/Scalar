/* Given a sorted array of integers A of size N and an integer B.

array A is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2 ).

You are given a target value B to search. If found in the array, return its index otherwise, return -1.

You may assume no duplicate exists in the array.

NOTE: Users are expected to solve this in O(log(N)) time.*/

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int search(final int[] A, int B) {

        int k = findkPosition(A);
        int pos = binarySearch(A, B, 0, k);
        if(pos == -1)
            pos = binarySearch(A,B, k+1, A.length-1);
        return pos;    
    }

    private int findkPosition(int[] A){
        int n = A.length-1;
        int low = 0, high = n, ans = 0;
        while(low <= high){
            int mid = (low+high)/2;
            if(A[mid] > A[n]){
                ans = mid;
                low = mid+1;
            }else
                high = mid-1;
        }
        return ans;
    }

    private int binarySearch(int[] A, int B, int low, int high){

        while(low <= high){
            int mid = (low+high)/2;
            if(A[mid] == B)
                return mid;
            else if(A[mid] < B)
                low = mid+1;
            else
                high = mid-1;        
        }
        return -1;
    }
}
