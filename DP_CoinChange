/* You are given a set of coins A. In how many ways can you make sum B assuming you have infinite amount of each coin in the set.

NOTE:

Coins in set A will be unique. Expected space complexity of this problem is O(B).
The answer can overflow. So, return the answer % (106 + 7). */

public class Solution {
    public int coinchange2(int[] A, int B) {
    int n = A.length;

    int[][] dp = new int[n + 1][B + 1];
    int MOD = 1000007;

    for (int i = 0; i <= n; i++) {
      for (int j = 0; j <= B; j++) {
        if (i == 0) {
          dp[i][j] = 0;
          if (j == 0) {
            dp[i][j] = 1;
          }
        } else if (j == 0) {
          dp[i][j] = 1;
        } else if (A[i - 1] <= j) {
          dp[i][j] = dp[i][j - A[i - 1]]%MOD + dp[i - 1][j]%MOD;
        } else {
          dp[i][j] = dp[i - 1][j]%MOD;
        }
      }
    }
    return dp[n][B]%MOD;
    }
}
