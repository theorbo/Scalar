/* Given a matrix of integers A of size N x M and an integer B. Write an efficient algorithm that searches for integer B in matrix A.

This matrix A has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than or equal to the last integer of the previous row.
Return 1 if B is present in A, else return 0.

NOTE: Rows are numbered from top to bottom, and columns are from left to right.*/

public class Solution {
    public int searchMatrix(int[][] A, int B) {

    int n = A[0].length;

    for (int i = 0; i < A.length; i++) {
      if (A[i][n - 1] == B) {
        return 1;
      }
      if (A[i][n - 1] > B) {
        return binarySearch(A, i, B);
      }
    }
    return 0;
  }

  private int binarySearch(int[][] A, int row, int val) {
    int high = A[row].length;
    int low = 0;
    while (low <= high) {
      int mid = (low + high) / 2;
      if (A[row][mid] == val) {
        return 1;
      } else if (A[row][mid] < val) {
        low = mid + 1;
      } else {
        high = mid - 1;
      }
    }
    return 0;

  }
}
