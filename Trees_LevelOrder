/* Given a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).*/

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> levelOrder(TreeNode A) {
        Queue<TreeNode> queue = new LinkedList();
    queue.add(A);
    ArrayList<ArrayList<Integer>> result = new ArrayList<>();

    while (!queue.isEmpty()) {
      int count = queue.size();
      ArrayList<Integer> temp = new ArrayList<>();
      while (count > 0) {
        TreeNode tempNode = queue.poll();
        temp.add(tempNode.val);
        if (tempNode.left != null) {
          queue.add(tempNode.left);
        }

        if (tempNode.right != null) {
          queue.add(tempNode.right);
        }
        count--;
      }
      result.add(temp);
    }
    return result;
    }
}
