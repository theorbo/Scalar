/* Given a root of binary tree A, determine if it is height-balanced.

A height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.*/

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public int isBalanced(TreeNode A) {
    return isBalancedTree(A) ? 1 : 0;
  }

  private boolean isBalancedTree(TreeNode root) {
    if (root == null) {
      return true;
    }

    int height = Math.abs(getHeight(root.right) - getHeight(root.left));
    return height <= 1 && isBalancedTree(root.left) && isBalancedTree(root.right);
  }

  private int getHeight(TreeNode root) {

    if (root == null) {
      return 0;
    }
    return 1 + Math.max(getHeight(root.left), getHeight(root.right));
  }
}
