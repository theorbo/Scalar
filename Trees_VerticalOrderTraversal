/* Given a binary tree, return a 2-D array with vertical order traversal of it. Go through the example and image for more details.  */


/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> verticalOrderTraversal(TreeNode A) {
        
    ArrayList<ArrayList<Integer>> result = new ArrayList<>();
    Map<Integer, ArrayList> treeNodeMap = new HashMap<>();
    Queue<Info> queue = new LinkedList<>();
    queue.add(new Info(A, 0));
    int min = 0;
    int max = 0;
    ArrayList<Integer> temp = new ArrayList<>();
    temp.add(A.val);
    treeNodeMap.put(0, temp);

    while (!queue.isEmpty()) {
      Info nodeInfo = queue.poll();
      if (nodeInfo.node.left != null) {
        //left Node
        if (treeNodeMap.containsKey(nodeInfo.dist - 1)) {
          ArrayList list = treeNodeMap.get(nodeInfo.dist - 1);
          list.add(nodeInfo.node.left.val);
          treeNodeMap.put(nodeInfo.dist - 1, list);
        } else {
          ArrayList<Integer> list = new ArrayList();
          list.add(nodeInfo.node.left.val);
          treeNodeMap.put(nodeInfo.dist - 1, list);
        }
        queue.add(new Info(nodeInfo.node.left, nodeInfo.dist - 1));
      }

      //Right Node
      if (nodeInfo.node.right != null) {

        if (treeNodeMap.containsKey(nodeInfo.dist + 1)) {
          ArrayList list = treeNodeMap.get(nodeInfo.dist + 1);
          list.add(nodeInfo.node.right.val);
          treeNodeMap.put(nodeInfo.dist + 1, list);
        } else {
          ArrayList<Integer> list = new ArrayList();
          list.add(nodeInfo.node.right.val);
          treeNodeMap.put(nodeInfo.dist + 1, list);
        }
        queue.add(new Info(nodeInfo.node.right, nodeInfo.dist + 1));
      }
      min = Math.min(min, nodeInfo.dist - 1);
      max = Math.max(max, nodeInfo.dist + 1);

    }


    for (int i = min; i <= max; i++) {
      if (treeNodeMap.containsKey(i)) {
        result.add(treeNodeMap.get(i));
      }
    }
    return result;
    }

    class Info {
    TreeNode node;
    int dist;

    public Info(TreeNode node, int dist) {
      this.node = node;
      this.dist = dist;
    }
  }
}
