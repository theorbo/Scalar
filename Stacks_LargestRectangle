/* Given an array of integers A.

A represents a histogram i.e A[i] denotes the height of the ith histogram's bar. Width of each bar is 1.

Find the area of the largest rectangle formed by the histogram. */


public class Solution {
    public int largestRectangleArea(int[] A) {
    int n = A.length;
    int[] NSL = getNSL(A);
    int[] NSR = getNSR(A);
    int maxArea = 0;
    for (int i = 0; i < n; i++) {
      int p1 = 0;
      int p2 = n - 1;
      if (NSL[i] != -1) {
        p1 = NSL[i] + 1;
      }
      if (NSR[i] != -1) {
        p2 = NSR[i] - 1;
      }
      int area = A[i] * (p2 - p1 + 1);
      maxArea = Math.max(maxArea, area);
    }
    return maxArea;
  }

  private int[] getNSL(int[] A) {

    Stack<Integer> CL = new Stack<>();
    int n = A.length;
    int[] result = new int[n];
    for (int i = 0; i < n; i++) {

      while (!CL.isEmpty() && A[CL.peek()] >= A[i]) {
        CL.pop();
      }

      if (CL.isEmpty()) {
        result[i] = -1;
      } else {
        result[i] = CL.peek();
      }

      CL.push(i);
    }
    return result;
  }

  private int[] getNSR(int[] A) {

    Stack<Integer> CL = new Stack<>();
    int n = A.length;
    int[] result = new int[n];
    for (int i = n - 1; i >= 0; i--) {

      while (!CL.isEmpty() && A[CL.peek()] >= A[i]) {
        CL.pop();
      }

      if (CL.isEmpty()) {
        result[i] = -1;
      } else {
        result[i] = CL.peek();
      }

      CL.push(i);
    }
    return result;
  }
}
