/* Given a string A denoting a stream of lowercase alphabets, you have to make a new string B.
B is formed such that we have to find the first non-repeating character each time a character is inserted to the stream and append it at the end to B. If no non-repeating character is found, append '#' at the end of B.

*/

public class Solution {
    public String solve(String A) {

    int len = A.length();
    HashMap<Character, Integer> characters = new HashMap<>();
    Queue<Character> Cl = new LinkedList<>();
    StringBuilder result = new StringBuilder();

    for (int i = 0; i < len; i++) {
      char b = A.charAt(i);
      if (!characters.containsKey(b)) {
        characters.put(b, 1);
      } else {
        characters.put(b, characters.get(b) + 1);
      }
      Cl.add(b);
      char characterToBeAdded = '#';
      while (!Cl.isEmpty()) {
        char temp = Cl.peek();
        if (characters.get(temp) == 1) {
          characterToBeAdded = temp;
          break;
        } else {
          Cl.poll();
        }
      }
      result.append(characterToBeAdded);
    }

    return result.toString();
    }
}
