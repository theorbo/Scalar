/* Given two arrays of integers A and B of size N each, where each pair (A[i], B[i]) for 0 <= i < N represents a unique point (x, y) in a 2-D Cartesian plane.

Find and return the number of unordered quadruplet (i, j, k, l) 
such that (A[i], B[i]), (A[j], B[j]), (A[k], B[k]) and (A[l], B[l]) form a rectangle with the rectangle having 
all the sides parallel to either x-axis or y-axis. */

public class Solution {
     public int solve(int[] A, int[] B) {

    Set<Pair> coordinates = new HashSet<>();
    int n = A.length;
    for (int i = 0; i < n; i++) {
      Pair pair = new Pair(A[i], B[i]);
      coordinates.add(pair);
    }

    int count = 0;
    for (int i = 0; i < n; i++) {
      for (int j = i + 1; j < n; j++) {
        Pair point1 = new Pair(A[i], B[j]);
        Pair point2 = new Pair(A[j], B[i]);
        if (!(A[i] == A[j] || B[i] == B[j])) {
          if (coordinates.contains(point1) && coordinates.contains(point2)) {
            count++;
          }
        }

      }
    }
    return count / 2;
  }

  class Pair {
    int X;
    int Y;

    public Pair(int x, int y) {
      this.X = x;
      this.Y = y;
    }

    public boolean equals(Object o) {
      Pair obj = (Pair) o;
      return obj.X == this.X && obj.Y == this.Y;
    }

    public int hashCode() {
      return Objects.hash(this.X, this.Y);
    }
  }
}
