/* Given a string A, partition A such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of A. */

public class Solution {
   int[][] dp;
  int[] cutsDp;

  public int minCut(String A) {

    int len = A.length();
    constructPalindromeSubstringDp(A);
    cutsDp = new int[len];
    for(int i = 0; i < len; i++){
      cutsDp[i] = -1;
    }
    return getMinimumCuts(A, 0, len - 1);
  }

  private int getMinimumCuts(String S, int start, int end) {
    if (S == null || S.isEmpty()) {
      return 0;
    }
    
    if(cutsDp[start] != -1)
      return cutsDp[start];

    if (isPalindrome(S, start, end)) {
      cutsDp[start] = 0;
      return 0;
    }
    int ans = end - start;
    for (int k = start; k <= end; k++) {
      if (isPalindrome(S, start, k)) {
        ans = Math.min(ans, 1 + getMinimumCuts(S, k + 1, end));
      }
    }
    cutsDp[start]=ans;
    return ans;

  }

  private boolean isPalindrome(String S, int start, int end) {
    return dp[start][end] == 1;
  }

  private void constructPalindromeSubstringDp(String S) {
    int n = S.length();
    dp = new int[n][n];

    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        if (i == j || i > j) {
          dp[i][j] = 1;
        }
        dp[i][j] = -1;
      }
    }

    for (int i = 0; i < n; i++) {
      for (int j = i; j < n; j++) {
        isPandindromeSubstring(S, i, j);
      }
    }
  }

  private int isPandindromeSubstring(String S, int start, int end) {

    if (start > end) {
      return 1;
    }

    if (dp[start][end] != -1) {
      return dp[start][end];
    }

    dp[start][end] = S.charAt(start) == S.charAt(end) && isPandindromeSubstring(S, start + 1, end - 1) == 1 ? 1 : 0;
    return dp[start][end];

  }
}
