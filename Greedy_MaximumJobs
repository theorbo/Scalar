/* There are N jobs to be done, but you can do only one job at a time.

Given an array A denoting the start time of the jobs and an array B denoting the finish time of the jobs.

Your aim is to select jobs in such a way so that you can finish the maximum number of jobs.

Return the maximum number of jobs you can finish. */


public class Solution {
    public int solve(int[] A, int[] B) {
        ArrayList<Job> jobList = new ArrayList<>();
    int len = A.length;
    for (int i = 0; i < len; i++) {
      Job job = new Job(A[i], B[i]);
      jobList.add(job);
    }

    Collections.sort(jobList, (o1, o2) -> o1.endTime - o2.endTime);

    int previousEndTime = -1;
    int count = 0;
    for (int i = 0; i < len; i++) {
      if (jobList.get(i).startTime >= previousEndTime) {
        count++;
        previousEndTime = jobList.get(i).endTime;
      }
    }
    return count;
    }
    private class Job {
    int startTime;
    int endTime;

    public Job(int startTime, int endTime) {
      this.startTime = startTime;
      this.endTime = endTime;
    }
  }
}
