/* Given a string A. Find the longest palindromic subsequence (A subsequence which does not need to be contiguous and is a palindrome).

You need to return the length of longest palindromic subsequence.*/

public class Solution {
    public int solve(String A) {
    StringBuilder str = new StringBuilder(A);
    return getLCS(A, str.reverse().toString());
  }

  public int getLCS(String A, String B) {

    int m = A.length();
    int n = B.length();
    int[][] dp = new int[m + 1][2];

    for (int i = 1; i <= m; i++) {
      for (int j = 1; j <= n; j++) {

        if (A.charAt(i - 1) == B.charAt(j - 1)) {
          dp[i][1] = 1 + dp[i - 1][0];
        } else {
          dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
        }
      }
    }
    return dp[m][n];
  }
}
