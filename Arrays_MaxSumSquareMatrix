/* Given a 2D integer matrix A of size N x N, find a B x B submatrix where B<= N and B>= 1, 
such that the sum of all the elements in the submatrix is maximum. */


public class Solution {
    public int solve(int[][] A, int B) {
    
    int i,j, m = A.length, n = A[0].length;
    
    //Calculating prefix sum
    for(i = 1; i < m; i++){
      for(j = 0; j < n; j++){
        A[i][j] += A[i-1][j];
      }
    }
    
    for(j = 1; j < n; j++){
      for(i = 0; i < m; i++){
        A[i][j] += A[i][j-1];
      }
    }
    
    int maxSum = calculateSumOfMatrixOfSize3(A, m-1, n-1,B);
    for(i = m-1; i -B+1 >= 0; i--){
      for(j = n-1; j-B+1 >= 0; j--){
        int sumOfMatrix = calculateSumOfMatrixOfSize3(A, i, j, B);
        maxSum = Math.max(sumOfMatrix, maxSum);
      }
    }
    return maxSum;
  }
  
  private int calculateSumOfMatrixOfSize3(int[][] A, int row, int column, int B){
    
    int res =  A[row][column];
    if(column - B >= 0)
      res -= A[row][column-B];
    
    if(row - B >= 0)
      res -= A[row-B][column];
    
    if(column - B >= 0 && row - B >= 0)
      res += A[row-B][column-B];
    
    return res;
  }
}
