/* Given an array of integers A, find and return the count of divisors of each element of the array.

NOTE: The order of the resultant array should be the same as the input array. */


public class Solution {
    int[] spf ;
    public int[] solve(int[] A) {

        int maxEle = maximumInteger(A);
        constructSPFArray(maxEle);

        int[] result = new int[A.length];
        for(int i = 0; i < A.length; i++){
            result[i] = getNumberOfDivisor(A[i]);
        }
        return result; 
    }

    private void constructSPFArray(int N){
        //construct sieve of eratothenes, spf array
        spf = new int[N+1];
        int i, j;
        for(i = 0; i <= N; i++){
            spf[i] = i;
        }
        spf[0] = -1;
        spf[1] = -1;

        for(i = 2; i *i <= N; i++){
            if(spf[i] == i){
                for(j = i*i; j <= N; j+= i){
                    spf[j] = Math.min(spf[j], i);
                }
            }  
        }
    }

    private int maximumInteger(int[] A){
        int maxInt = Integer.MIN_VALUE;
        for(int i = 0; i < A.length; i++){
            if(A[i] > maxInt)
                maxInt = A[i];
        }
        return maxInt;
    }

    private int getNumberOfDivisor(int N){
      
        int count = 1;
        while(N > 1){
            int p = spf[N];
            int c =0;
            while(N%p == 0){
                c++;
                N = N/p;
            }
            count = count*(c+1);
        }
        return count;
    }
}
