/* Implement wildcard pattern matching with support for ' ? ' and ' * ' for strings A and B.

' ? ' : Matches any single character.
' * ' : Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).  */

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    int[][] dp;

  public int isMatch(final String A, final String B) {
     StringBuilder B_optimised = new StringBuilder();

    B_optimised.append(B.charAt(0));

    for (int i = 1; i < B.length(); ++i) {

      if (B.charAt(i) == '*' && B.charAt(i - 1) == '*') {
        continue;
      }

      B_optimised.append(B.charAt(i));

    }
    String pattern = B_optimised.toString();

    int m = A.length();
    int n = pattern.length();
    dp = new int[m + 1][n + 1];

    for (int i = 0; i <= m; i++) {
      for (int j = 0; j <= n; j++) {
        dp[i][j] = -1;
      }
    }

    return isPatterMatch(A, pattern, m, n);
  }


  private int isPatterMatch(String S, String pattern, int i, int j) {

    if (i == 0 && j == 0) {
      dp[i][j]= 1;
      return dp[i][j];
    } else if(i == 0 || j == 0){
      if (j == 1 && pattern.charAt(j - 1) == '*') {
         dp[i][j] = 1; 
        return 1;
      }
      dp[i][j] = 0;
      return 0;
    }

    if (dp[i][j] != -1) {
      return dp[i][j];
    }

    if (pattern.charAt(j-1) != '*' && pattern.charAt(j-1) != '?') {
      if (pattern.charAt(j-1) == S.charAt(i-1)) {
        dp[i][j] = isPatterMatch(S, pattern, i - 1, j - 1);
      } else {
        dp[i][j] = 0;
      }
    } else if (pattern.charAt(j-1) == '?') {
      dp[i][j] = isPatterMatch(S, pattern, i - 1, j - 1);
    } else {
      dp[i][j] = isPatterMatch(S, pattern, i, j - 1) | isPatterMatch(S, pattern, i - 1, j);
    }

    return dp[i][j];
  }
}
