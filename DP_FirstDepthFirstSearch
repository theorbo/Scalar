/* You are given N towns (1 to N). All towns are connected via unique directed path as mentioned in the input.

Given 2 towns find whether you can reach the first town from the second without repeating any edge.

B C : query to find whether B is reachable from C.

Input contains an integer array A of size N and 2 integers B and C ( 1 <= B, C <= N ).

There exist a directed edge from A[i] to i+1 for every 1 <= i < N. Also, it's guaranteed that A[i] <= i for every 1 <= i < N.

NOTE: Array A is 0-indexed. A[0] = 1 which you can ignore as it doesn't represent any edge.
*/


public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    boolean[] visited;
    public int solve(int[] A, final int B, final int C) {
    ArrayList<Integer>[] graph = getAdjacencyList(A);
    visited = new boolean[A.length + 1];
    dfs(graph, C);
    return visited[B] ? 1 : 0;
  }

  private void dfs(ArrayList<Integer>[] graph, int src) {

    if (visited[src]) {
      return;
    }
    visited[src] = true;

    for (int i : graph[src]) {
      if (!visited[i]) {
        dfs(graph, i);
      }
    }
  }
  private ArrayList<Integer>[] getAdjacencyList(int[] A) {

    int n = A.length;
    ArrayList<Integer>[] graph = new ArrayList[n + 1];

    for(int i=0;i<=n;i++){
        graph[i] = new ArrayList<>();
    }

    for (int i = 0; i < n; i++) {
      graph[A[i]].add(i + 1);
    }
    return graph;
  }
}

