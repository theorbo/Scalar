/* Given a matrix of integers A of size N x M and an integer B.
In the given matrix every row and column is sorted in increasing order. Find and return the position of B in the matrix in the given form:
If A[i][j] = B then return (i * 1009 + j)
If B is not present return -1.

Note 1: Rows are numbered from top to bottom and columns are numbered from left to right.
Note 2: If there are multiple B in A then return the smallest value of i*1009 +j such that A[i][j]=B.

Solution 0(NlogM)
*/

public class Solution {
    public int solve(int[][] A, int B) {
        
        int m = A.length;
        int n = A[0].length;
        int result = Integer.MAX_VALUE;
        for(int i = 0; i < m; i++){
           if(B >= A[i][0] && B <= A[i][n-1]){
                int pos = getElement(A, i, n-1, B);
                if(pos != -1){
                   result = Math.min(result, ((i+1)*1009 + (pos+1)));
                }
           }
        }

        if(result == Integer.MAX_VALUE)
        return -1;
        return result;
    
    }

    private int getElement(int[][] A, int row, int highestColumn, int ele){

        int low = 0;
        int high = highestColumn;
        int result = -1;
        
        while(low <= high){
            int mid = low + (high - low)/2;
            if(A[row][mid] == ele){
                result = mid;
                high = mid-1;
            }
            else if(A[row][mid] < ele) {
                low = mid +1;
            } else{
                high = mid-1;
            }  
        }
        return result;
    }
}
