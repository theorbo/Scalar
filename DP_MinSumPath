/* Given a M x N grid A of integers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Return the minimum sum of the path.

NOTE: You can only move either down or right at any point in time.*/

public class Solution {
    public int minPathSum(int[][] A) {

       int m = A.length;
    int n = A[0].length;
    int[][] dp = new int[m + 1][n + 1];

    for (int i = 1; i <= m; i++) {
      for (int j = 1; j <= n; j++) {
        if (i == 1) {
          dp[i][j] = A[i - 1][j - 1] + dp[i][j - 1];
        } else if (j == 1) {
          dp[i][j] = A[i - 1][j - 1] + dp[i - 1][j];
        } else {
          dp[i][j] = A[i - 1][j - 1] + Math.min(dp[i - 1][j], dp[i][j - 1]);
        }
      }
    }
    return dp[m][n];
    }    
}
